apply plugin: 'com.android.library'

android {
	compileSdkVersion versionCompiler
	buildToolsVersion versionBuildTool

	compileOptions {
		sourceCompatibility javaSourceCompatibility
		targetCompatibility javaTargetCompatibility
	}

	defaultConfig {
		minSdkVersion 21
		targetSdkVersion versionTarget
		versionCode appVersionCode
		versionName appVersionName

		testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

		externalNativeBuild {
			ndkBuild {
				arguments "NDK_APPLICATION_MK:=src/main/jni/Application.mk"
				abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
			}
		}
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
	}

	packagingOptions {
		exclude '**/libc++_shared.so'
		exclude '**/libcommon.so'
	}

	externalNativeBuild {
		ndkBuild {
			path file('src/main/jni/Android.mk')
		}
	}
}

tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn ndkA
}

task ndkA(type: Copy) {
	FileTree natives = zipTree(new File(project(':aandusb-aar').projectDir, "aandusb-${aandusbLibVersion}.aar"))
	from natives
	into 'src/main/cpp/externalLibs'
	include ('**/libcommon.so', '**/**.h')
	includeEmptyDirs = false
}

dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])

	implementation "com.android.support:support-v4:${supportLibVersion}"
	implementation "com.android.support:appcompat-v7:${supportLibVersion}"
	implementation "com.android.support:support-annotations:${supportLibVersion}"

	testImplementation 'junit:junit:4.12'
	androidTestImplementation 'com.android.support.test:runner:1.0.2'
	androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

	implementation project(':aandusb-aar')
}
